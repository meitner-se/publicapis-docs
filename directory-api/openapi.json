{
  "components": {
    "headers": {
      "RateLimit-Limit": {
        "description": "The maximum number of requests allowed in the current window.",
        "example": 1000,
        "schema": {
          "type": "integer"
        }
      },
      "RateLimit-Remaining": {
        "description": "The number of requests left in the current window.",
        "example": 432,
        "schema": {
          "type": "integer"
        }
      },
      "RateLimit-Reset": {
        "description": "The time at which the rate limit window resets in UTC epoch seconds.",
        "example": 1712158200,
        "schema": {
          "type": "integer"
        }
      },
      "Request-ID": {
        "description": "Unique identifier for the request, useful for debugging.",
        "example": "req_abc123xyz",
        "schema": {
          "type": "string"
        }
      },
      "Request-Process-Time": {
        "description": "Time it took to process the request, in milliseconds.",
        "example": 125,
        "schema": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "Retry-After": {
        "description": "How many seconds to wait before retrying.",
        "example": 60,
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "AuditEventSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AuditEventFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: AuditEventSearch",
        "required": true
      },
      "EmployeeCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the employee"
                },
                "dateOfBirth": {
                  "description": "The date of birth of the employee",
                  "example": "2019-12-16",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress1": {
                  "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the employee",
                  "example": "Lise",
                  "type": "string"
                },
                "gender": {
                  "description": "The gender of the employee",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    null
                  ],
                  "example": "Female",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "identityNumber": {
                  "description": "The identity number of the employee, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the employee",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeeCreate",
        "required": true
      },
      "EmployeePlacementCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "employeeID": {
                  "description": "The ID of the employee the placement belongs to",
                  "example": "26ff4d3f-227a-4dcc-942b-77aee7dbc75f",
                  "format": "uuid",
                  "type": "string"
                },
                "endDate": {
                  "description": "The end date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "roles": {
                  "description": "The roles of the employee",
                  "items": {
                    "description": "The roles of the employee",
                    "enum": [
                      "Manager",
                      "OtherPersonnel",
                      "Scheduler",
                      "Teacher",
                      "Admin",
                      "CareTeam"
                    ],
                    "example": "Admin",
                    "type": "string"
                  },
                  "type": "array"
                },
                "schoolID": {
                  "description": "The ID of the school the placement belongs to",
                  "example": "b0160da9-f2af-4d69-aa10-a777bad27ab1",
                  "format": "uuid",
                  "type": "string"
                },
                "signature": {
                  "description": "The signature of the employee",
                  "example": "LM",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "startDate": {
                  "description": "The start date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the employee",
                  "example": "Principal",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "EmployeeID",
                "SchoolID",
                "StartDate"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeePlacementCreate",
        "required": true
      },
      "EmployeePlacementSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EmployeePlacementFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeePlacementSearch",
        "required": true
      },
      "EmployeePlacementUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "endDate": {
                  "description": "The end date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "roles": {
                  "description": "The roles of the employee",
                  "items": {
                    "description": "The roles of the employee",
                    "enum": [
                      "OtherPersonnel",
                      "Scheduler",
                      "Teacher",
                      "Admin",
                      "CareTeam",
                      "Manager"
                    ],
                    "example": "Admin",
                    "type": "string"
                  },
                  "type": "array"
                },
                "signature": {
                  "description": "The signature of the employee",
                  "example": "LM",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "startDate": {
                  "description": "The start date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the employee",
                  "example": "Principal",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "StartDate"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeePlacementUpdate",
        "required": true
      },
      "EmployeeSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EmployeeFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeeSearch",
        "required": true
      },
      "EmployeeUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the employee"
                },
                "dateOfBirth": {
                  "description": "The date of birth of the employee",
                  "example": "2019-12-16",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress1": {
                  "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the employee",
                  "example": "Lise",
                  "type": "string"
                },
                "gender": {
                  "description": "The gender of the employee",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    null
                  ],
                  "example": "Female",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "identityNumber": {
                  "description": "The identity number of the employee, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the employee",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: EmployeeUpdate",
        "required": true
      },
      "GroupCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "category": {
                  "default": "Education",
                  "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
                  "enum": [
                    "Education",
                    "Other"
                  ],
                  "example": "Education",
                  "type": "string"
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "memberIDs": {
                  "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
                  "items": {
                    "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
                    "example": "211d9a58-42b2-4927-8f1c-2123f468d63f",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "moderatorIDs": {
                  "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
                  "items": {
                    "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
                    "example": "fc460406-8136-46ad-ac83-06c318184d64",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "schoolID": {
                  "description": "The ID of the school the group belongs to",
                  "example": "db72c2ff-27a8-40f7-9790-7f2b28317840",
                  "format": "uuid",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the group, must be unique within the school.",
                  "example": "1A",
                  "type": "string"
                },
                "types": {
                  "description": "The types of the group",
                  "items": {
                    "description": "The types of the group",
                    "enum": [
                      "Class",
                      "Childcare",
                      "Mentor"
                    ],
                    "example": "Class",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "SchoolID",
                "Title"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: GroupCreate",
        "required": true
      },
      "GroupSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GroupFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: GroupSearch",
        "required": true
      },
      "GroupUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "memberIDs": {
                  "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
                  "items": {
                    "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
                    "example": "8374e089-f2bc-4e71-8bd3-11f31fd4d630",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "moderatorIDs": {
                  "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
                  "items": {
                    "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
                    "example": "46a87c69-72c9-4906-bbf2-903c5244ba65",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "title": {
                  "description": "The title of the group, must be unique within the school.",
                  "example": "1A",
                  "type": "string"
                },
                "types": {
                  "description": "The types of the group",
                  "items": {
                    "description": "The types of the group",
                    "enum": [
                      "Class",
                      "Childcare",
                      "Mentor"
                    ],
                    "example": "Class",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "Title"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: GroupUpdate",
        "required": true
      },
      "GuardianCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the guardian"
                },
                "emailAddress1": {
                  "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the guardian",
                  "example": "Lise",
                  "type": "string"
                },
                "identityNumber": {
                  "description": "The identity number of the guardian, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the guardian",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "studentIDs": {
                  "description": "The IDs of the students the guardian is responsible for.",
                  "items": {
                    "description": "The IDs of the students the guardian is responsible for.",
                    "example": "1e305b0c-2766-4f24-879b-370fb8a14dd5",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: GuardianCreate",
        "required": true
      },
      "GuardianSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GuardianFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: GuardianSearch",
        "required": true
      },
      "GuardianUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the guardian"
                },
                "emailAddress1": {
                  "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the guardian",
                  "example": "Lise",
                  "type": "string"
                },
                "identityNumber": {
                  "description": "The identity number of the guardian, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the guardian",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "studentIDs": {
                  "description": "The IDs of the students the guardian is responsible for.",
                  "items": {
                    "description": "The IDs of the students the guardian is responsible for.",
                    "example": "f6baf9f0-ce2e-472f-919f-de1fbda39413",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: GuardianUpdate",
        "required": true
      },
      "SchoolCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "csnSchoolCode": {
                  "description": "The School Code provided by CSN, required for reports to CSN",
                  "example": "12345",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "municipalityCode": {
                  "description": "Municipality code of the school, is used in reports and printed on grade documents",
                  "example": "0184",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "schoolType": {
                  "description": "Type of schooling provided at the school",
                  "enum": [
                    "GR",
                    "GY",
                    "FS"
                  ],
                  "example": "GR",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the school",
                  "example": "Meitner Grundskola",
                  "type": "string"
                },
                "unitCode": {
                  "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
                  "example": "12345678",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "Title",
                "SchoolType"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: SchoolCreate",
        "required": true
      },
      "SchoolSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SchoolFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: SchoolSearch",
        "required": true
      },
      "SchoolUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "csnSchoolCode": {
                  "description": "The School Code provided by CSN, required for reports to CSN",
                  "example": "12345",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "municipalityCode": {
                  "description": "Municipality code of the school, is used in reports and printed on grade documents",
                  "example": "0184",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "title": {
                  "description": "The title of the school",
                  "example": "Meitner Grundskola",
                  "type": "string"
                },
                "unitCode": {
                  "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
                  "example": "12345678",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "Title"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: SchoolUpdate",
        "required": true
      },
      "StudentCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the student"
                },
                "dateOfBirth": {
                  "description": "The date of birth of the student",
                  "example": "2019-12-16",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress1": {
                  "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the student",
                  "example": "Lise",
                  "type": "string"
                },
                "gender": {
                  "description": "The gender of the student",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    null
                  ],
                  "example": "Female",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "identityNumber": {
                  "description": "The identity number of the student, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the student",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the student, will be used for communication with the student from the system.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
                  "example": "Text field",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentCreate",
        "required": true
      },
      "StudentPlacementCreate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "endDate": {
                  "description": "The end date of the placement",
                  "example": "2025-08-01",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "hasChildcare": {
                  "default": false,
                  "description": "Whether the student has childcare",
                  "example": true,
                  "type": "boolean"
                },
                "motherTongue": {
                  "description": "The mother tongue of the student",
                  "example": "SWE",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "schoolID": {
                  "description": "The ID of the school the student is placed in",
                  "example": "25e1a0b7-328a-4e59-a8ad-a43151fd223e",
                  "format": "uuid",
                  "type": "string"
                },
                "schoolType": {
                  "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
                  "enum": [
                    "GR",
                    "GRAN",
                    "GY",
                    "GYAN",
                    "FS"
                  ],
                  "example": "GR",
                  "type": "string"
                },
                "schoolYear": {
                  "description": "The school year the student is placed in",
                  "enum": [
                    "3",
                    "5",
                    "7",
                    "8",
                    "9",
                    "0",
                    "2",
                    "6",
                    "1",
                    "4",
                    null
                  ],
                  "example": "1",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "startDate": {
                  "description": "The start date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": "string"
                },
                "studentID": {
                  "description": "The ID of the student the placement belongs to",
                  "example": "9179676a-9a69-4eec-b48f-fc2043d44fb3",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "StudentID",
                "SchoolID",
                "SchoolType",
                "StartDate"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentPlacementCreate",
        "required": true
      },
      "StudentPlacementSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StudentPlacementFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentPlacementSearch",
        "required": true
      },
      "StudentPlacementUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "endDate": {
                  "description": "The end date of the placement",
                  "example": "2025-08-01",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "hasChildcare": {
                  "default": false,
                  "description": "Whether the student has childcare",
                  "example": true,
                  "type": "boolean"
                },
                "motherTongue": {
                  "description": "The mother tongue of the student",
                  "example": "SWE",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "schoolType": {
                  "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
                  "enum": [
                    "GR",
                    "GRAN",
                    "GY",
                    "GYAN",
                    "FS"
                  ],
                  "example": "GR",
                  "type": "string"
                },
                "schoolYear": {
                  "description": "The school year the student is placed in",
                  "enum": [
                    "9",
                    "0",
                    "2",
                    "3",
                    "5",
                    "7",
                    "8",
                    "1",
                    "4",
                    "6",
                    null
                  ],
                  "example": "1",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "startDate": {
                  "description": "The start date of the placement",
                  "example": "2024-08-01",
                  "format": "date",
                  "type": "string"
                }
              },
              "required": [
                "SchoolType",
                "StartDate"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentPlacementUpdate",
        "required": true
      },
      "StudentSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StudentFilter"
                    }
                  ],
                  "description": "The query to search for."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentSearch",
        "required": true
      },
      "StudentUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "description": "The address of the student"
                },
                "dateOfBirth": {
                  "description": "The date of birth of the student",
                  "example": "2019-12-16",
                  "format": "date",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress1": {
                  "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "example": "lise@meitner.se",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "emailAddress2": {
                  "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
                  "example": "lise@gmail.com",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
                },
                "firstName": {
                  "description": "The first name of the student",
                  "example": "Lise",
                  "type": "string"
                },
                "gender": {
                  "description": "The gender of the student",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    null
                  ],
                  "example": "Female",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "identityNumber": {
                  "description": "The identity number of the student, must be unique within the organization.",
                  "example": "20191216-1234",
                  "type": "string"
                },
                "identityTemporary": {
                  "default": false,
                  "description": "If the identity number is temporary",
                  "example": true,
                  "type": "boolean"
                },
                "lastName": {
                  "description": "The last name of the student",
                  "example": "Meitner",
                  "type": "string"
                },
                "phoneNumber1": {
                  "description": "The primary phone number of the student, will be used for communication with the student from the system.",
                  "example": "+46701234567",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "phoneNumber2": {
                  "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
                  "example": "Text field",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "IdentityNumber",
                "FirstName",
                "LastName"
              ],
              "type": "object"
            }
          }
        },
        "description": "Request object for: StudentUpdate",
        "required": true
      }
    },
    "responses": {
      "AuditEventGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuditEvent"
            }
          }
        },
        "description": "Response object for: AuditEventGet"
      },
      "AuditEventList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of AuditEvent that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditEvent"
                      }
                    ],
                    "description": "The list of AuditEvent that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: AuditEventList"
      },
      "AuditEventSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of AuditEvent that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditEvent"
                      }
                    ],
                    "description": "The list of AuditEvent that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: AuditEventSearch"
      },
      "EmployeeCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        },
        "description": "Response object for: EmployeeCreate"
      },
      "EmployeeGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        },
        "description": "Response object for: EmployeeGet"
      },
      "EmployeeList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Employee that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Employee"
                      }
                    ],
                    "description": "The list of Employee that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: EmployeeList"
      },
      "EmployeePlacementCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmployeePlacement"
            }
          }
        },
        "description": "Response object for: EmployeePlacementCreate"
      },
      "EmployeePlacementGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmployeePlacement"
            }
          }
        },
        "description": "Response object for: EmployeePlacementGet"
      },
      "EmployeePlacementList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of EmployeePlacement that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacement"
                      }
                    ],
                    "description": "The list of EmployeePlacement that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: EmployeePlacementList"
      },
      "EmployeePlacementSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of EmployeePlacement that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacement"
                      }
                    ],
                    "description": "The list of EmployeePlacement that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: EmployeePlacementSearch"
      },
      "EmployeePlacementUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmployeePlacement"
            }
          }
        },
        "description": "Response object for: EmployeePlacementUpdate"
      },
      "EmployeeSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Employee that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Employee"
                      }
                    ],
                    "description": "The list of Employee that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: EmployeeSearch"
      },
      "EmployeeUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        },
        "description": "Response object for: EmployeeUpdate"
      },
      "GroupCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "description": "Response object for: GroupCreate"
      },
      "GroupGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "description": "Response object for: GroupGet"
      },
      "GroupList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Group that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Group"
                      }
                    ],
                    "description": "The list of Group that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: GroupList"
      },
      "GroupSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Group that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Group"
                      }
                    ],
                    "description": "The list of Group that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: GroupSearch"
      },
      "GroupUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "description": "Response object for: GroupUpdate"
      },
      "GuardianCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Guardian"
            }
          }
        },
        "description": "Response object for: GuardianCreate"
      },
      "GuardianGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Guardian"
            }
          }
        },
        "description": "Response object for: GuardianGet"
      },
      "GuardianList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Guardian that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Guardian"
                      }
                    ],
                    "description": "The list of Guardian that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: GuardianList"
      },
      "GuardianSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Guardian that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Guardian"
                      }
                    ],
                    "description": "The list of Guardian that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: GuardianSearch"
      },
      "GuardianUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Guardian"
            }
          }
        },
        "description": "Response object for: GuardianUpdate"
      },
      "SchoolCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/School"
            }
          }
        },
        "description": "Response object for: SchoolCreate"
      },
      "SchoolGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/School"
            }
          }
        },
        "description": "Response object for: SchoolGet"
      },
      "SchoolList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of School that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/School"
                      }
                    ],
                    "description": "The list of School that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: SchoolList"
      },
      "SchoolSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of School that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/School"
                      }
                    ],
                    "description": "The list of School that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: SchoolSearch"
      },
      "SchoolUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/School"
            }
          }
        },
        "description": "Response object for: SchoolUpdate"
      },
      "StudentCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Student"
            }
          }
        },
        "description": "Response object for: StudentCreate"
      },
      "StudentGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Student"
            }
          }
        },
        "description": "Response object for: StudentGet"
      },
      "StudentList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Student that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Student"
                      }
                    ],
                    "description": "The list of Student that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: StudentList"
      },
      "StudentPlacementArchive": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StudentPlacement"
            }
          }
        },
        "description": "Response object for: StudentPlacementArchive"
      },
      "StudentPlacementCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StudentPlacement"
            }
          }
        },
        "description": "Response object for: StudentPlacementCreate"
      },
      "StudentPlacementGet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StudentPlacement"
            }
          }
        },
        "description": "Response object for: StudentPlacementGet"
      },
      "StudentPlacementList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of StudentPlacement that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StudentPlacement"
                      }
                    ],
                    "description": "The list of StudentPlacement that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: StudentPlacementList"
      },
      "StudentPlacementRestore": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StudentPlacement"
            }
          }
        },
        "description": "Response object for: StudentPlacementRestore"
      },
      "StudentPlacementSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of StudentPlacement that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StudentPlacement"
                      }
                    ],
                    "description": "The list of StudentPlacement that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: StudentPlacementSearch"
      },
      "StudentPlacementUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StudentPlacement"
            }
          }
        },
        "description": "Response object for: StudentPlacementUpdate"
      },
      "StudentSearch": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The list of Student that match the search query.",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Student"
                      }
                    ],
                    "description": "The list of Student that match the search query."
                  },
                  "type": "array"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginationResponse"
                    }
                  ],
                  "description": "The pagination information for the list."
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Response object for: StudentSearch"
      },
      "StudentUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Student"
            }
          }
        },
        "description": "Response object for: StudentUpdate"
      }
    },
    "schemas": {
      "Address": {
        "properties": {
          "countryCode": {
            "description": "The country code of the address",
            "example": "SWE",
            "type": [
              "string",
              "null"
            ]
          },
          "municipalityCode": {
            "description": "The municipality code of the address",
            "example": "0184",
            "type": [
              "string",
              "null"
            ]
          },
          "postalAddress": {
            "description": "The postal address of the address",
            "example": "Dalvägen 14",
            "type": [
              "string",
              "null"
            ]
          },
          "postalCity": {
            "description": "The city of the address",
            "example": "Solna",
            "type": [
              "string",
              "null"
            ]
          },
          "postalCode": {
            "description": "The postal code of the address",
            "example": "169 56",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "AddressFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AddressFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "AddressFilterComparable": {
        "properties": {
          "countryCode": {
            "description": "The country code of the address",
            "example": "Text field",
            "type": "string"
          },
          "municipalityCode": {
            "description": "The municipality code of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalAddress": {
            "description": "The postal address of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalCity": {
            "description": "The city of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "postalAddress",
          "postalCode",
          "postalCity",
          "countryCode",
          "municipalityCode"
        ],
        "type": "object"
      },
      "AddressFilterContains": {
        "properties": {
          "countryCode": {
            "description": "The country code of the address",
            "items": {
              "description": "The country code of the address",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "municipalityCode": {
            "description": "The municipality code of the address",
            "items": {
              "description": "The municipality code of the address",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "postalAddress": {
            "description": "The postal address of the address",
            "items": {
              "description": "The postal address of the address",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "postalCity": {
            "description": "The city of the address",
            "items": {
              "description": "The city of the address",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "postalCode": {
            "description": "The postal code of the address",
            "items": {
              "description": "The postal code of the address",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddressFilterLike": {
        "properties": {
          "countryCode": {
            "description": "The country code of the address",
            "example": "Text field",
            "type": "string"
          },
          "municipalityCode": {
            "description": "The municipality code of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalAddress": {
            "description": "The postal address of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalCity": {
            "description": "The city of the address",
            "example": "Text field",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "postalAddress",
          "postalCode",
          "postalCity",
          "countryCode",
          "municipalityCode"
        ],
        "type": "object"
      },
      "AddressFilterNull": {
        "properties": {
          "countryCode": {
            "default": false,
            "description": "The country code of the address",
            "example": true,
            "type": "boolean"
          },
          "municipalityCode": {
            "default": false,
            "description": "The municipality code of the address",
            "example": true,
            "type": "boolean"
          },
          "postalAddress": {
            "default": false,
            "description": "The postal address of the address",
            "example": true,
            "type": "boolean"
          },
          "postalCity": {
            "default": false,
            "description": "The city of the address",
            "example": true,
            "type": "boolean"
          },
          "postalCode": {
            "default": false,
            "description": "The postal code of the address",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AddressFilterRange": {
        "type": "object"
      },
      "AuditEvent": {
        "properties": {
          "id": {
            "description": "The ID of the audit event",
            "example": "d1e7741f-fd86-4242-9549-497c9aa47778",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "The type of resource the event occured for",
            "enum": [
              "Group",
              "Guardian",
              "Employee",
              "EmployeePlacement",
              "Student",
              "StudentPlacement"
            ],
            "example": "Student",
            "type": "string"
          },
          "resourceID": {
            "description": "The ID of the resource the event belongs to",
            "example": "5be3f155-cd41-49a0-8b89-0dddb6550b23",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp of the event",
            "example": "2024-08-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of the audit event",
            "enum": [
              "Delete"
            ],
            "example": "Delete",
            "type": "string"
          }
        },
        "required": [
          "id",
          "timestamp",
          "resource",
          "resourceID",
          "type"
        ],
        "type": "object"
      },
      "AuditEventFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEventFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "AuditEventFilterComparable": {
        "properties": {
          "id": {
            "description": "The ID of the audit event",
            "example": "98c320e6-89ca-47f8-a9d2-c10a90fb7e25",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "The type of resource the event occured for",
            "enum": [
              "EmployeePlacement",
              "Student",
              "StudentPlacement",
              "Group",
              "Guardian",
              "Employee"
            ],
            "type": "string"
          },
          "resourceID": {
            "description": "The ID of the resource the event belongs to",
            "example": "00d9c051-e0b5-477c-8732-d477c87ab186",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp of the event",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of the audit event",
            "enum": [
              "Delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "timestamp",
          "resource",
          "resourceID",
          "type"
        ],
        "type": "object"
      },
      "AuditEventFilterContains": {
        "properties": {
          "id": {
            "description": "The ID of the audit event",
            "items": {
              "description": "The ID of the audit event",
              "example": "7fd3d2b5-b846-4904-9bd5-a0a846779aac",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "resource": {
            "description": "The type of resource the event occured for",
            "items": {
              "description": "The type of resource the event occured for",
              "enum": [
                "Group",
                "Guardian",
                "Employee",
                "EmployeePlacement",
                "Student",
                "StudentPlacement"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "resourceID": {
            "description": "The ID of the resource the event belongs to",
            "items": {
              "description": "The ID of the resource the event belongs to",
              "example": "735b057f-086b-4929-833a-0c678ea2dfe4",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "The timestamp of the event",
            "items": {
              "description": "The timestamp of the event",
              "example": "2025-06-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of the audit event",
            "items": {
              "description": "The type of the audit event",
              "enum": [
                "Delete"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AuditEventFilterLike": {
        "type": "object"
      },
      "AuditEventFilterNull": {
        "type": "object"
      },
      "AuditEventFilterRange": {
        "properties": {
          "timestamp": {
            "description": "The timestamp of the event",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp"
        ],
        "type": "object"
      },
      "AuditEventResource": {
        "enum": [
          [
            "Group",
            "Guardian",
            "Employee",
            "EmployeePlacement",
            "Student",
            "StudentPlacement"
          ]
        ],
        "type": "string"
      },
      "AuditEventType": {
        "enum": [
          [
            "Delete"
          ]
        ],
        "type": "string"
      },
      "Employee": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the employee"
          },
          "dateOfBirth": {
            "description": "The date of birth of the employee",
            "example": "2019-12-16",
            "format": "date",
            "type": [
              "string",
              "null"
            ]
          },
          "emailAddress1": {
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "lise@meitner.se",
            "type": [
              "string",
              "null"
            ]
          },
          "emailAddress2": {
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "lise@gmail.com",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the employee",
            "example": "Lise",
            "type": "string"
          },
          "gender": {
            "description": "The gender of the employee",
            "enum": [
              "Female",
              "Male",
              "Other",
              null
            ],
            "example": "Female",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "The ID of the employee",
            "example": "7d934b92-ad85-46c3-92b2-ceea88b3fa13",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the employee, must be unique within the organization.",
            "example": "20191216-1234",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the employee",
            "example": "Meitner",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "example": "+46701234567",
            "type": [
              "string",
              "null"
            ]
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "+46701234567",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "EmployeeFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeeFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "EmployeeFilterComparable": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterComparable"
              }
            ],
            "description": "The address of the employee"
          },
          "dateOfBirth": {
            "description": "The date of birth of the employee",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "emailAddress1": {
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the employee",
            "example": "Text field",
            "type": "string"
          },
          "gender": {
            "description": "The gender of the employee",
            "enum": [
              "Female",
              "Male",
              "Other"
            ],
            "type": "string"
          },
          "id": {
            "description": "The ID of the employee",
            "example": "6c8e9dac-f931-4e5b-9adc-311e21b6518b",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the employee, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the employee",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "id",
          "gender",
          "identityNumber",
          "identityTemporary",
          "firstName",
          "lastName",
          "dateOfBirth",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2"
        ],
        "type": "object"
      },
      "EmployeeFilterContains": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "description": "The address of the employee"
          },
          "dateOfBirth": {
            "description": "The date of birth of the employee",
            "items": {
              "description": "The date of birth of the employee",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "emailAddress1": {
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "items": {
              "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "emailAddress2": {
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the employee",
            "items": {
              "description": "The first name of the employee",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "gender": {
            "description": "The gender of the employee",
            "items": {
              "description": "The gender of the employee",
              "enum": [
                "Female",
                "Male",
                "Other"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID of the employee",
            "items": {
              "description": "The ID of the employee",
              "example": "a96c8822-8b39-4ab1-ac6e-a94c4a102766",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "identityNumber": {
            "description": "The identity number of the employee, must be unique within the organization.",
            "items": {
              "description": "The identity number of the employee, must be unique within the organization.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "lastName": {
            "description": "The last name of the employee",
            "items": {
              "description": "The last name of the employee",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "items": {
              "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EmployeeFilterLike": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "description": "The address of the employee"
          },
          "emailAddress1": {
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the employee",
            "example": "Text field",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the employee, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the employee",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "identityNumber",
          "firstName",
          "lastName",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2"
        ],
        "type": "object"
      },
      "EmployeeFilterNull": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "description": "The address of the employee"
          },
          "dateOfBirth": {
            "default": false,
            "description": "The date of birth of the employee",
            "example": true,
            "type": "boolean"
          },
          "emailAddress1": {
            "default": false,
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": true,
            "type": "boolean"
          },
          "emailAddress2": {
            "default": false,
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "gender": {
            "default": false,
            "description": "The gender of the employee",
            "example": true,
            "type": "boolean"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          },
          "phoneNumber1": {
            "default": false,
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "example": true,
            "type": "boolean"
          },
          "phoneNumber2": {
            "default": false,
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EmployeeFilterRange": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the employee"
          },
          "dateOfBirth": {
            "description": "The date of birth of the employee",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee for auditing purposes."
          }
        },
        "required": [
          "dateOfBirth"
        ],
        "type": "object"
      },
      "EmployeePlacement": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "2024_2025",
            "type": [
              "string",
              "null"
            ]
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2024-08-01T00:00:00Z",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "employeeID": {
            "description": "The ID of the employee the placement belongs to",
            "example": "8b2d0228-dccd-44ad-8130-e6ecc75009b2",
            "format": "uuid",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2024-08-01",
            "format": "date",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the employee-placement",
            "example": "1b2018f2-945e-4a54-814c-724045329cc2",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "roles": {
            "description": "The roles of the employee",
            "items": {
              "description": "The roles of the employee",
              "enum": [
                "OtherPersonnel",
                "Scheduler",
                "Teacher",
                "Admin",
                "CareTeam",
                "Manager"
              ],
              "example": "Admin",
              "type": "string"
            },
            "type": "array"
          },
          "schoolID": {
            "description": "The ID of the school the placement belongs to",
            "example": "4aaffae7-0100-4cb4-a895-ad31942a2784",
            "format": "uuid",
            "type": "string"
          },
          "signature": {
            "description": "The signature of the employee",
            "example": "LM",
            "type": [
              "string",
              "null"
            ]
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2024-08-01",
            "format": "date",
            "type": "string"
          },
          "title": {
            "description": "The title of the employee",
            "example": "Principal",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "employeeID",
          "schoolID",
          "startDate"
        ],
        "type": "object"
      },
      "EmployeePlacementFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacementFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "EmployeePlacementFilterComparable": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "Text field",
            "type": "string"
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "employeeID": {
            "description": "The ID of the employee the placement belongs to",
            "example": "03ee39fb-484c-4804-8fcd-576b827c73f2",
            "format": "uuid",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the employee-placement",
            "example": "d74cdb19-6897-441d-8943-48c217dbe5d2",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "roles": {
            "description": "The roles of the employee",
            "enum": [
              "OtherPersonnel",
              "Scheduler",
              "Teacher",
              "Admin",
              "CareTeam",
              "Manager"
            ],
            "type": "string"
          },
          "schoolID": {
            "description": "The ID of the school the placement belongs to",
            "example": "cdeafcd1-cb42-4d35-9a63-af7bbb3861a5",
            "format": "uuid",
            "type": "string"
          },
          "signature": {
            "description": "The signature of the employee",
            "example": "Text field",
            "type": "string"
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "title": {
            "description": "The title of the employee",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "id",
          "employeeID",
          "schoolID",
          "signature",
          "title",
          "roles",
          "startDate",
          "endDate",
          "archiveYear",
          "archivedAt"
        ],
        "type": "object"
      },
      "EmployeePlacementFilterContains": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "items": {
              "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "items": {
              "description": "The timestamp the placement was archived",
              "example": "2025-06-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "type": "array"
          },
          "employeeID": {
            "description": "The ID of the employee the placement belongs to",
            "items": {
              "description": "The ID of the employee the placement belongs to",
              "example": "b864778f-d57d-4981-aadf-6b53be7f24bc",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "endDate": {
            "description": "The end date of the placement",
            "items": {
              "description": "The end date of the placement",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the employee-placement",
            "items": {
              "description": "The ID of the employee-placement",
              "example": "6348c64e-0c74-46b3-ab36-88a0ae996f2d",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "roles": {
            "description": "The roles of the employee",
            "items": {
              "description": "The roles of the employee",
              "enum": [
                "OtherPersonnel",
                "Scheduler",
                "Teacher",
                "Admin",
                "CareTeam",
                "Manager"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "schoolID": {
            "description": "The ID of the school the placement belongs to",
            "items": {
              "description": "The ID of the school the placement belongs to",
              "example": "38d6fc33-7537-4fe1-a258-999479c19b50",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "signature": {
            "description": "The signature of the employee",
            "items": {
              "description": "The signature of the employee",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "startDate": {
            "description": "The start date of the placement",
            "items": {
              "description": "The start date of the placement",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the employee",
            "items": {
              "description": "The title of the employee",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EmployeePlacementFilterLike": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "signature": {
            "description": "The signature of the employee",
            "example": "Text field",
            "type": "string"
          },
          "title": {
            "description": "The title of the employee",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "signature",
          "title",
          "archiveYear"
        ],
        "type": "object"
      },
      "EmployeePlacementFilterNull": {
        "properties": {
          "archiveYear": {
            "default": false,
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": true,
            "type": "boolean"
          },
          "archivedAt": {
            "default": false,
            "description": "The timestamp the placement was archived",
            "example": true,
            "type": "boolean"
          },
          "endDate": {
            "default": false,
            "description": "The end date of the placement",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "roles": {
            "default": false,
            "description": "The roles of the employee",
            "example": true,
            "type": "boolean"
          },
          "signature": {
            "default": false,
            "description": "The signature of the employee",
            "example": true,
            "type": "boolean"
          },
          "title": {
            "default": false,
            "description": "The title of the employee",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EmployeePlacementFilterRange": {
        "properties": {
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of the employee-placement for auditing purposes."
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "startDate",
          "endDate",
          "archivedAt"
        ],
        "type": "object"
      },
      "EmployeePlacementRole": {
        "enum": [
          [
            "CareTeam",
            "Manager",
            "OtherPersonnel",
            "Scheduler",
            "Teacher",
            "Admin"
          ]
        ],
        "type": "string"
      },
      "External": {
        "properties": {
          "source": {
            "description": "The source of the external information",
            "example": "ExternalIntegrationAPI",
            "type": [
              "string",
              "null"
            ]
          },
          "sourceID": {
            "description": "The ID of the external source",
            "example": "12345678",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ExternalFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "ExternalFilterComparable": {
        "properties": {
          "source": {
            "description": "The source of the external information",
            "example": "Text field",
            "type": "string"
          },
          "sourceID": {
            "description": "The ID of the external source",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "sourceID",
          "source"
        ],
        "type": "object"
      },
      "ExternalFilterContains": {
        "properties": {
          "source": {
            "description": "The source of the external information",
            "items": {
              "description": "The source of the external information",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "sourceID": {
            "description": "The ID of the external source",
            "items": {
              "description": "The ID of the external source",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExternalFilterLike": {
        "properties": {
          "source": {
            "description": "The source of the external information",
            "example": "Text field",
            "type": "string"
          },
          "sourceID": {
            "description": "The ID of the external source",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "sourceID",
          "source"
        ],
        "type": "object"
      },
      "ExternalFilterNull": {
        "properties": {
          "source": {
            "default": false,
            "description": "The source of the external information",
            "example": true,
            "type": "boolean"
          },
          "sourceID": {
            "default": false,
            "description": "The ID of the external source",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExternalFilterRange": {
        "type": "object"
      },
      "ExternalRequest": {
        "properties": {
          "sourceID": {
            "description": "The ID of the external source",
            "example": "12345678",
            "type": "string"
          }
        },
        "required": [
          "sourceID"
        ],
        "type": "object"
      },
      "ExternalRequestFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalRequestFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalRequestFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "ExternalRequestFilterComparable": {
        "properties": {
          "sourceID": {
            "description": "The ID of the external source",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "sourceID"
        ],
        "type": "object"
      },
      "ExternalRequestFilterContains": {
        "properties": {
          "sourceID": {
            "description": "The ID of the external source",
            "items": {
              "description": "The ID of the external source",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExternalRequestFilterLike": {
        "properties": {
          "sourceID": {
            "description": "The ID of the external source",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "sourceID"
        ],
        "type": "object"
      },
      "ExternalRequestFilterNull": {
        "type": "object"
      },
      "ExternalRequestFilterRange": {
        "type": "object"
      },
      "Gender": {
        "enum": [
          [
            "Female",
            "Male",
            "Other"
          ]
        ],
        "type": "string"
      },
      "Group": {
        "properties": {
          "category": {
            "default": "Education",
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
            "enum": [
              "Education",
              "Other"
            ],
            "example": "Education",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the group",
            "example": "fd9afdca-6bca-4597-8a53-b6206bd56a4d",
            "format": "uuid",
            "type": "string"
          },
          "memberIDs": {
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "items": {
              "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
              "example": "8fb13b3d-d1da-4cdc-bac2-5431ce6b7abf",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "moderatorIDs": {
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "items": {
              "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
              "example": "17c7f149-368f-47a3-a197-4016c262adbb",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "schoolID": {
            "description": "The ID of the school the group belongs to",
            "example": "69cee73c-7afd-47ac-a3c6-cb70d39e4dc4",
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "description": "The title of the group, must be unique within the school.",
            "example": "1A",
            "type": "string"
          },
          "types": {
            "description": "The types of the group",
            "items": {
              "description": "The types of the group",
              "enum": [
                "Class",
                "Childcare",
                "Mentor"
              ],
              "example": "Class",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "schoolID",
          "title"
        ],
        "type": "object"
      },
      "GroupCategory": {
        "enum": [
          [
            "Education",
            "Other"
          ]
        ],
        "type": "string"
      },
      "GroupFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "GroupFilterComparable": {
        "properties": {
          "category": {
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
            "enum": [
              "Education",
              "Other"
            ],
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the group",
            "example": "ac07f0dc-260e-44f1-b608-c1a39fe42b99",
            "format": "uuid",
            "type": "string"
          },
          "memberIDs": {
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "example": "1acfe816-ffbb-476f-ad8e-d8269ed633dc",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "moderatorIDs": {
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "example": "8d225b3e-57f5-4041-b876-07699f96bc20",
            "format": "uuid",
            "type": "string"
          },
          "schoolID": {
            "description": "The ID of the school the group belongs to",
            "example": "168bf64f-61cd-47ee-8b72-745b9fb1061d",
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "description": "The title of the group, must be unique within the school.",
            "example": "Text field",
            "type": "string"
          },
          "types": {
            "description": "The types of the group",
            "enum": [
              "Class",
              "Childcare",
              "Mentor"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "schoolID",
          "category",
          "title",
          "types",
          "moderatorIDs",
          "memberIDs"
        ],
        "type": "object"
      },
      "GroupFilterContains": {
        "properties": {
          "category": {
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
            "items": {
              "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
              "enum": [
                "Education",
                "Other"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the group",
            "items": {
              "description": "The ID of the group",
              "example": "9b2dfe54-f5b5-4a2f-b8e6-80bfbd806a39",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "memberIDs": {
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "items": {
              "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
              "example": "16f7545a-9473-43dd-bc02-d989c0f4ded4",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "moderatorIDs": {
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "items": {
              "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
              "example": "3989efa3-b256-4884-884f-db6ccb41bc99",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "schoolID": {
            "description": "The ID of the school the group belongs to",
            "items": {
              "description": "The ID of the school the group belongs to",
              "example": "12c3c30f-ca9c-40e0-a697-3b4a9646bb0a",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the group, must be unique within the school.",
            "items": {
              "description": "The title of the group, must be unique within the school.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "types": {
            "description": "The types of the group",
            "items": {
              "description": "The types of the group",
              "enum": [
                "Class",
                "Childcare",
                "Mentor"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupFilterLike": {
        "properties": {
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "title": {
            "description": "The title of the group, must be unique within the school.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "GroupFilterNull": {
        "properties": {
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "memberIDs": {
            "default": false,
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "example": true,
            "type": "boolean"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "moderatorIDs": {
            "default": false,
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "example": true,
            "type": "boolean"
          },
          "types": {
            "default": false,
            "description": "The types of the group",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupFilterRange": {
        "properties": {
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          }
        },
        "type": "object"
      },
      "GroupType": {
        "enum": [
          [
            "Class",
            "Childcare",
            "Mentor"
          ]
        ],
        "type": "string"
      },
      "Guardian": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "lise@meitner.se",
            "type": [
              "string",
              "null"
            ]
          },
          "emailAddress2": {
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "lise@gmail.com",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the guardian",
            "example": "Lise",
            "type": "string"
          },
          "id": {
            "description": "The ID of the guardian",
            "example": "7bee791c-d287-48a6-be77-7a26231ca711",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the guardian, must be unique within the organization.",
            "example": "20191216-1234",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the guardian",
            "example": "Meitner",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "example": "+46701234567",
            "type": [
              "string",
              "null"
            ]
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "+46701234567",
            "type": [
              "string",
              "null"
            ]
          },
          "studentIDs": {
            "description": "The IDs of the students the guardian is responsible for.",
            "items": {
              "description": "The IDs of the students the guardian is responsible for.",
              "example": "4058bafb-7964-476d-b4f8-95b033303a8c",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "GuardianFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GuardianFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "GuardianFilterComparable": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterComparable"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the guardian",
            "example": "Text field",
            "type": "string"
          },
          "id": {
            "description": "The ID of the guardian",
            "example": "675717c8-0882-4bc7-985a-47d204a822c1",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the guardian, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the guardian",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "studentIDs": {
            "description": "The IDs of the students the guardian is responsible for.",
            "example": "3dfaf03b-f2f2-49f8-a0d9-f1eefe9e4497",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "identityNumber",
          "identityTemporary",
          "firstName",
          "lastName",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2",
          "studentIDs"
        ],
        "type": "object"
      },
      "GuardianFilterContains": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "items": {
              "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "emailAddress2": {
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the guardian",
            "items": {
              "description": "The first name of the guardian",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID of the guardian",
            "items": {
              "description": "The ID of the guardian",
              "example": "3c12fa02-cc4e-4a78-8e1b-2d111cb540a3",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "identityNumber": {
            "description": "The identity number of the guardian, must be unique within the organization.",
            "items": {
              "description": "The identity number of the guardian, must be unique within the organization.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "lastName": {
            "description": "The last name of the guardian",
            "items": {
              "description": "The last name of the guardian",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "items": {
              "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "studentIDs": {
            "description": "The IDs of the students the guardian is responsible for.",
            "items": {
              "description": "The IDs of the students the guardian is responsible for.",
              "example": "994d526e-f808-4a77-a5bd-b1c9681eb092",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GuardianFilterLike": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the guardian",
            "example": "Text field",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the guardian, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the guardian",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "identityNumber",
          "firstName",
          "lastName",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2"
        ],
        "type": "object"
      },
      "GuardianFilterNull": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "default": false,
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": true,
            "type": "boolean"
          },
          "emailAddress2": {
            "default": false,
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          },
          "phoneNumber1": {
            "default": false,
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "example": true,
            "type": "boolean"
          },
          "phoneNumber2": {
            "default": false,
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          },
          "studentIDs": {
            "default": false,
            "description": "The IDs of the students the guardian is responsible for.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GuardianFilterRange": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the guardian"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of the guardian for auditing purposes."
          }
        },
        "type": "object"
      },
      "Meta": {
        "properties": {
          "createdAt": {
            "description": "The timestamp when the resource was created",
            "example": "2024-08-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "The user that created the resource",
            "example": "216deca8-ca3e-4007-9245-56bf5205ea25",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "updatedAt": {
            "description": "The timestamp when the resource was last updated",
            "example": "2024-08-01T00:00:00Z",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "updatedBy": {
            "description": "The latest user that updated the resource",
            "example": "67059aa0-5990-473b-aa26-0cadfdb7cdfd",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "createdAt"
        ],
        "type": "object"
      },
      "MetaFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MetaFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "MetaFilterComparable": {
        "properties": {
          "createdAt": {
            "description": "The timestamp when the resource was created",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "The user that created the resource",
            "example": "454b360c-dc1d-4f07-ba31-ca90c2d5be85",
            "format": "uuid",
            "type": "string"
          },
          "updatedAt": {
            "description": "The timestamp when the resource was last updated",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "description": "The latest user that updated the resource",
            "example": "540834b9-8a0e-4150-af05-6c44c6d47bf4",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy"
        ],
        "type": "object"
      },
      "MetaFilterContains": {
        "properties": {
          "createdAt": {
            "description": "The timestamp when the resource was created",
            "items": {
              "description": "The timestamp when the resource was created",
              "example": "2025-06-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "type": "array"
          },
          "createdBy": {
            "description": "The user that created the resource",
            "items": {
              "description": "The user that created the resource",
              "example": "f8d89333-7034-4999-84d6-3d8a58f462bd",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "The timestamp when the resource was last updated",
            "items": {
              "description": "The timestamp when the resource was last updated",
              "example": "2025-06-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "type": "array"
          },
          "updatedBy": {
            "description": "The latest user that updated the resource",
            "items": {
              "description": "The latest user that updated the resource",
              "example": "efe194e5-d39a-4d35-81ec-40a3df58693e",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetaFilterLike": {
        "type": "object"
      },
      "MetaFilterNull": {
        "properties": {
          "createdBy": {
            "default": false,
            "description": "The user that created the resource",
            "example": true,
            "type": "boolean"
          },
          "updatedAt": {
            "default": false,
            "description": "The timestamp when the resource was last updated",
            "example": true,
            "type": "boolean"
          },
          "updatedBy": {
            "default": false,
            "description": "The latest user that updated the resource",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MetaFilterRange": {
        "properties": {
          "createdAt": {
            "description": "The timestamp when the resource was created",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "description": "The timestamp when the resource was last updated",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "PaginationResponse": {
        "properties": {
          "limit": {
            "description": "The maximum number of items to return from the list",
            "example": "10",
            "type": "integer"
          },
          "offset": {
            "description": "How many items to skip in the list",
            "example": "0",
            "type": "integer"
          },
          "total": {
            "description": "The total number of items that can be paginated",
            "example": "100",
            "type": "integer"
          }
        },
        "required": [
          "total",
          "offset",
          "limit"
        ],
        "type": "object"
      },
      "School": {
        "properties": {
          "csnSchoolCode": {
            "description": "The School Code provided by CSN, required for reports to CSN",
            "example": "12345",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the school",
            "example": "43c46756-5fba-48d0-8f6c-7e717ae2a9e2",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "municipalityCode": {
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "example": "0184",
            "type": [
              "string",
              "null"
            ]
          },
          "schoolType": {
            "description": "Type of schooling provided at the school",
            "enum": [
              "GR",
              "GY",
              "FS"
            ],
            "example": "GR",
            "type": "string"
          },
          "title": {
            "description": "The title of the school",
            "example": "Meitner Grundskola",
            "type": "string"
          },
          "unitCode": {
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "example": "12345678",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "title",
          "schoolType"
        ],
        "type": "object"
      },
      "SchoolFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchoolFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "SchoolFilterComparable": {
        "properties": {
          "csnSchoolCode": {
            "description": "The School Code provided by CSN, required for reports to CSN",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the school",
            "example": "afc506f5-0403-4b6f-8226-991299e41e11",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "municipalityCode": {
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "example": "Text field",
            "type": "string"
          },
          "schoolType": {
            "description": "Type of schooling provided at the school",
            "enum": [
              "FS",
              "GR",
              "GY"
            ],
            "type": "string"
          },
          "title": {
            "description": "The title of the school",
            "example": "Text field",
            "type": "string"
          },
          "unitCode": {
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "unitCode",
          "csnSchoolCode",
          "municipalityCode",
          "schoolType"
        ],
        "type": "object"
      },
      "SchoolFilterContains": {
        "properties": {
          "csnSchoolCode": {
            "description": "The School Code provided by CSN, required for reports to CSN",
            "items": {
              "description": "The School Code provided by CSN, required for reports to CSN",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the school",
            "items": {
              "description": "The ID of the school",
              "example": "051abf17-6ad8-4094-a27f-a7386b11f90c",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "municipalityCode": {
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "items": {
              "description": "Municipality code of the school, is used in reports and printed on grade documents",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "schoolType": {
            "description": "Type of schooling provided at the school",
            "items": {
              "description": "Type of schooling provided at the school",
              "enum": [
                "FS",
                "GR",
                "GY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the school",
            "items": {
              "description": "The title of the school",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "unitCode": {
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "items": {
              "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SchoolFilterLike": {
        "properties": {
          "csnSchoolCode": {
            "description": "The School Code provided by CSN, required for reports to CSN",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "municipalityCode": {
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "example": "Text field",
            "type": "string"
          },
          "title": {
            "description": "The title of the school",
            "example": "Text field",
            "type": "string"
          },
          "unitCode": {
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "title",
          "unitCode",
          "csnSchoolCode",
          "municipalityCode"
        ],
        "type": "object"
      },
      "SchoolFilterNull": {
        "properties": {
          "csnSchoolCode": {
            "default": false,
            "description": "The School Code provided by CSN, required for reports to CSN",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          },
          "municipalityCode": {
            "default": false,
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "example": true,
            "type": "boolean"
          },
          "unitCode": {
            "default": false,
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SchoolFilterRange": {
        "properties": {
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of a resource for auditing purposes."
          }
        },
        "type": "object"
      },
      "SchoolType": {
        "enum": [
          [
            "GR",
            "GY",
            "FS"
          ]
        ],
        "type": "string"
      },
      "SchoolYear": {
        "enum": [
          [
            "6",
            "1",
            "4",
            "3",
            "5",
            "7",
            "8",
            "9",
            "0",
            "2"
          ]
        ],
        "type": "string"
      },
      "Student": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the student"
          },
          "dateOfBirth": {
            "description": "The date of birth of the student",
            "example": "2019-12-16",
            "format": "date",
            "type": [
              "string",
              "null"
            ]
          },
          "emailAddress1": {
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "lise@meitner.se",
            "type": [
              "string",
              "null"
            ]
          },
          "emailAddress2": {
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "lise@gmail.com",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the student",
            "example": "Lise",
            "type": "string"
          },
          "gender": {
            "description": "The gender of the student",
            "enum": [
              "Female",
              "Male",
              "Other",
              null
            ],
            "example": "Female",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "The ID of the student",
            "example": "c94cc7a4-864f-441a-b7ca-648514c298b5",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the student, must be unique within the organization.",
            "example": "20191216-1234",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the student",
            "example": "Meitner",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "example": "+46701234567",
            "type": [
              "string",
              "null"
            ]
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "StudentFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "StudentFilterComparable": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterComparable"
              }
            ],
            "description": "The address of the student"
          },
          "dateOfBirth": {
            "description": "The date of birth of the student",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "emailAddress1": {
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the student",
            "example": "Text field",
            "type": "string"
          },
          "gender": {
            "description": "The gender of the student",
            "enum": [
              "Female",
              "Male",
              "Other"
            ],
            "type": "string"
          },
          "id": {
            "description": "The ID of the student",
            "example": "8d958731-418e-4f27-b655-df7992a6ee46",
            "format": "uuid",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the student, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "identityTemporary": {
            "default": false,
            "description": "If the identity number is temporary",
            "example": true,
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the student",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "id",
          "gender",
          "identityNumber",
          "identityTemporary",
          "firstName",
          "lastName",
          "dateOfBirth",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2"
        ],
        "type": "object"
      },
      "StudentFilterContains": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "description": "The address of the student"
          },
          "dateOfBirth": {
            "description": "The date of birth of the student",
            "items": {
              "description": "The date of birth of the student",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "emailAddress1": {
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "items": {
              "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "emailAddress2": {
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the student",
            "items": {
              "description": "The first name of the student",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "gender": {
            "description": "The gender of the student",
            "items": {
              "description": "The gender of the student",
              "enum": [
                "Female",
                "Male",
                "Other"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID of the student",
            "items": {
              "description": "The ID of the student",
              "example": "ab694459-4641-4d2c-9faf-35555d1a4201",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "identityNumber": {
            "description": "The identity number of the student, must be unique within the organization.",
            "items": {
              "description": "The identity number of the student, must be unique within the organization.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "lastName": {
            "description": "The last name of the student",
            "items": {
              "description": "The last name of the student",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "items": {
              "description": "The primary phone number of the student, will be used for communication with the student from the system.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "items": {
              "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StudentFilterLike": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "description": "The address of the student"
          },
          "emailAddress1": {
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": "Text field",
            "type": "string"
          },
          "emailAddress2": {
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "firstName": {
            "description": "The first name of the student",
            "example": "Text field",
            "type": "string"
          },
          "identityNumber": {
            "description": "The identity number of the student, must be unique within the organization.",
            "example": "Text field",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the student",
            "example": "Text field",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          },
          "phoneNumber1": {
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "example": "Text field",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "identityNumber",
          "firstName",
          "lastName",
          "emailAddress1",
          "emailAddress2",
          "phoneNumber1",
          "phoneNumber2"
        ],
        "type": "object"
      },
      "StudentFilterNull": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "description": "The address of the student"
          },
          "dateOfBirth": {
            "default": false,
            "description": "The date of birth of the student",
            "example": true,
            "type": "boolean"
          },
          "emailAddress1": {
            "default": false,
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "example": true,
            "type": "boolean"
          },
          "emailAddress2": {
            "default": false,
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "gender": {
            "default": false,
            "description": "The gender of the student",
            "example": true,
            "type": "boolean"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          },
          "phoneNumber1": {
            "default": false,
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "example": true,
            "type": "boolean"
          },
          "phoneNumber2": {
            "default": false,
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StudentFilterRange": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the student"
          },
          "dateOfBirth": {
            "description": "The date of birth of the student",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student for auditing purposes."
          }
        },
        "required": [
          "dateOfBirth"
        ],
        "type": "object"
      },
      "StudentPlacement": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "2024_2025",
            "type": [
              "string",
              "null"
            ]
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2024-08-01T00:00:00Z",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2025-08-01",
            "format": "date",
            "type": [
              "string",
              "null"
            ]
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "hasChildcare": {
            "default": false,
            "description": "Whether the student has childcare",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the student-placement",
            "example": "c45e73a8-988c-46a2-9d2e-160ef24c3278",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "motherTongue": {
            "description": "The mother tongue of the student",
            "example": "SWE",
            "type": [
              "string",
              "null"
            ]
          },
          "schoolID": {
            "description": "The ID of the school the student is placed in",
            "example": "891042c2-9fb4-4a72-981a-b8d0faf0f15a",
            "format": "uuid",
            "type": "string"
          },
          "schoolType": {
            "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
            "enum": [
              "GY",
              "GYAN",
              "FS",
              "GR",
              "GRAN"
            ],
            "example": "GR",
            "type": "string"
          },
          "schoolYear": {
            "description": "The school year the student is placed in",
            "enum": [
              "1",
              "4",
              "6",
              "0",
              "2",
              "3",
              "5",
              "7",
              "8",
              "9",
              null
            ],
            "example": "1",
            "type": [
              "string",
              "null"
            ]
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2024-08-01",
            "format": "date",
            "type": "string"
          },
          "studentID": {
            "description": "The ID of the student the placement belongs to",
            "example": "232aa5f7-830c-4f9e-bc50-bc5bff7ad6f1",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "studentID",
          "schoolID",
          "schoolType",
          "startDate"
        ],
        "type": "object"
      },
      "StudentPlacementFilter": {
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterContains"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterComparable"
              }
            ]
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ]
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterLike"
              }
            ]
          },
          "nestedFilters": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacementFilter"
                }
              ]
            },
            "type": "array"
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterContains"
              }
            ]
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterComparable"
              }
            ]
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterLike"
              }
            ]
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterNull"
              }
            ]
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterNull"
              }
            ]
          },
          "orCondition": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ]
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ]
          }
        },
        "type": "object"
      },
      "StudentPlacementFilterComparable": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "Text field",
            "type": "string"
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterComparable"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "hasChildcare": {
            "default": false,
            "description": "Whether the student has childcare",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the student-placement",
            "example": "5d897bea-00e2-423d-a0c2-1085871db743",
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterComparable"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "motherTongue": {
            "description": "The mother tongue of the student",
            "example": "Text field",
            "type": "string"
          },
          "schoolID": {
            "description": "The ID of the school the student is placed in",
            "example": "0164cccf-669e-4ca2-bbad-6eb703f78db6",
            "format": "uuid",
            "type": "string"
          },
          "schoolType": {
            "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
            "enum": [
              "GR",
              "GRAN",
              "GY",
              "GYAN",
              "FS"
            ],
            "type": "string"
          },
          "schoolYear": {
            "description": "The school year the student is placed in",
            "enum": [
              "9",
              "0",
              "2",
              "3",
              "5",
              "7",
              "8",
              "1",
              "4",
              "6"
            ],
            "type": "string"
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "studentID": {
            "description": "The ID of the student the placement belongs to",
            "example": "6ae44eb3-6657-4689-8c1b-456e191a321c",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "studentID",
          "schoolID",
          "schoolType",
          "schoolYear",
          "hasChildcare",
          "motherTongue",
          "startDate",
          "endDate",
          "archiveYear",
          "archivedAt"
        ],
        "type": "object"
      },
      "StudentPlacementFilterContains": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "items": {
              "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "items": {
              "description": "The timestamp the placement was archived",
              "example": "2025-06-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "type": "array"
          },
          "endDate": {
            "description": "The end date of the placement",
            "items": {
              "description": "The end date of the placement",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "id": {
            "description": "The ID of the student-placement",
            "items": {
              "description": "The ID of the student-placement",
              "example": "2098e7ef-105a-4a3d-a83f-3ddd6923777e",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "motherTongue": {
            "description": "The mother tongue of the student",
            "items": {
              "description": "The mother tongue of the student",
              "example": "Text field",
              "type": "string"
            },
            "type": "array"
          },
          "schoolID": {
            "description": "The ID of the school the student is placed in",
            "items": {
              "description": "The ID of the school the student is placed in",
              "example": "621c2f03-5318-4bbd-864d-b18edfed6bac",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "schoolType": {
            "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
            "items": {
              "description": "The school type for the student, if not provided on create, the school type will be fetched from the school.",
              "enum": [
                "GY",
                "GYAN",
                "FS",
                "GR",
                "GRAN"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "schoolYear": {
            "description": "The school year the student is placed in",
            "items": {
              "description": "The school year the student is placed in",
              "enum": [
                "0",
                "2",
                "3",
                "5",
                "7",
                "8",
                "9",
                "1",
                "4",
                "6"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "startDate": {
            "description": "The start date of the placement",
            "items": {
              "description": "The start date of the placement",
              "example": "2025-06-01",
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "studentID": {
            "description": "The ID of the student the placement belongs to",
            "items": {
              "description": "The ID of the student the placement belongs to",
              "example": "f5dd15fd-81ba-4de5-b8ee-b9b8bfa94d51",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StudentPlacementFilterLike": {
        "properties": {
          "archiveYear": {
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": "Text field",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "motherTongue": {
            "description": "The mother tongue of the student",
            "example": "Text field",
            "type": "string"
          }
        },
        "required": [
          "motherTongue",
          "archiveYear"
        ],
        "type": "object"
      },
      "StudentPlacementFilterNull": {
        "properties": {
          "archiveYear": {
            "default": false,
            "description": "The year the placement was archived, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "example": true,
            "type": "boolean"
          },
          "archivedAt": {
            "default": false,
            "description": "The timestamp the placement was archived",
            "example": true,
            "type": "boolean"
          },
          "endDate": {
            "default": false,
            "description": "The end date of the placement",
            "example": true,
            "type": "boolean"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "motherTongue": {
            "default": false,
            "description": "The mother tongue of the student",
            "example": true,
            "type": "boolean"
          },
          "schoolYear": {
            "default": false,
            "description": "The school year the student is placed in",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StudentPlacementFilterRange": {
        "properties": {
          "archivedAt": {
            "description": "The timestamp the placement was archived",
            "example": "2025-06-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "description": "Meta contains information about the creation and modification of the student-placement for auditing purposes."
          },
          "startDate": {
            "description": "The start date of the placement",
            "example": "2025-06-01",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "startDate",
          "endDate",
          "archivedAt"
        ],
        "type": "object"
      },
      "StudentPlacementSchoolType": {
        "enum": [
          [
            "GR",
            "GRAN",
            "GY",
            "GYAN",
            "FS"
          ]
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "ClientCredentials": {
        "in": "header",
        "name": "Client-ID",
        "type": "apiKey"
      },
      "ClientSecret": {
        "in": "header",
        "name": "Client-Secret",
        "type": "apiKey"
      }
    }
  },
  "externalDocs": {
    "description": "Docs for the Directory API",
    "url": "https://docs.meitner.se/directory/v1"
  },
  "info": {
    "contact": {
      "email": "support@meitner.se",
      "name": "Meitner",
      "url": "https://meitner.se"
    },
    "description": "API for the Directory service",
    "termsOfService": "https://meitner.se/terms",
    "title": "Directory API",
    "version": "1.0.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/audit-event": {
      "get": {
        "description": "Returns a paginated list of all `AuditEvents` in your organization.",
        "externalDocs": {
          "description": "Docs for the AuditEvent resource",
          "url": "https://docs.meitner.se/directory/v1/AuditEvent"
        },
        "operationId": "AuditEventList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuditEventList"
          }
        },
        "summary": "List all AuditEvents",
        "tags": [
          "AuditEvent"
        ]
      }
    },
    "/audit-event/_search": {
      "post": {
        "description": "The AuditEvent resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the AuditEvent resource",
          "url": "https://docs.meitner.se/directory/v1/AuditEvent"
        },
        "operationId": "AuditEventSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuditEventSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuditEventSearch"
          }
        },
        "summary": "Search for AuditEvents",
        "tags": [
          "AuditEvent"
        ]
      }
    },
    "/audit-event/{id}": {
      "get": {
        "description": "Retrieves the `AuditEvent` with the given ID.",
        "externalDocs": {
          "description": "Docs for the AuditEvent resource",
          "url": "https://docs.meitner.se/directory/v1/AuditEvent"
        },
        "operationId": "AuditEventGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the AuditEvent to retrieve.",
              "example": "15b5ce2b-c9df-4cfb-bfb8-9d22c8ce0f71",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuditEventGet"
          }
        },
        "summary": "Retrieve an existing AuditEvent",
        "tags": [
          "AuditEvent"
        ]
      }
    },
    "/employee": {
      "get": {
        "description": "Returns a paginated list of all `Employees` in your organization.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeeList"
          }
        },
        "summary": "List all Employees",
        "tags": [
          "Employee"
        ]
      },
      "post": {
        "description": "Creates a new Employee.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/EmployeeCreate"
          }
        },
        "summary": "Create a new Employee",
        "tags": [
          "Employee",
          "Directory"
        ]
      }
    },
    "/employee-placement": {
      "get": {
        "description": "Returns a paginated list of all `EmployeePlacements` in your organization.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeePlacementList"
          }
        },
        "summary": "List all EmployeePlacements",
        "tags": [
          "EmployeePlacement"
        ]
      },
      "post": {
        "description": "Creates a new EmployeePlacement.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/EmployeePlacementCreate"
          }
        },
        "summary": "Create a new EmployeePlacement",
        "tags": [
          "EmployeePlacement"
        ]
      }
    },
    "/employee-placement/_search": {
      "post": {
        "description": "The EmployeePlacement resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeePlacementSearch"
          }
        },
        "summary": "Search for EmployeePlacements",
        "tags": [
          "EmployeePlacement"
        ]
      }
    },
    "/employee-placement/{id}": {
      "delete": {
        "description": "Deletes an existing EmployeePlacement by ID.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the EmployeePlacement to delete.",
              "example": "28a6d5e6-0e24-480c-a035-0fc88cf2c932",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing EmployeePlacement",
        "tags": [
          "EmployeePlacement"
        ]
      },
      "get": {
        "description": "Retrieves the `EmployeePlacement` with the given ID.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the EmployeePlacement to retrieve.",
              "example": "ccb6df39-a592-4397-ac99-dbef39c423a2",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeePlacementGet"
          }
        },
        "summary": "Retrieve an existing EmployeePlacement",
        "tags": [
          "EmployeePlacement"
        ]
      },
      "patch": {
        "description": "Updates the EmployeePlacement with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the EmployeePlacement resource",
          "url": "https://docs.meitner.se/directory/v1/EmployeePlacement"
        },
        "operationId": "EmployeePlacementUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the EmployeePlacement to update.",
              "example": "ca8c8d60-1ab5-4678-bd2c-d3e584e3d69f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeePlacementUpdate"
          }
        },
        "summary": "Update an existing EmployeePlacement",
        "tags": [
          "EmployeePlacement"
        ]
      }
    },
    "/employee/_search": {
      "post": {
        "description": "The Employee resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeeSearch"
          }
        },
        "summary": "Search for Employees",
        "tags": [
          "Employee"
        ]
      }
    },
    "/employee/{id}": {
      "delete": {
        "description": "Deletes an existing Employee by ID.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Employee to delete.",
              "example": "2abbb125-76d2-47c8-a892-e872299f0c1d",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing Employee",
        "tags": [
          "Employee"
        ]
      },
      "get": {
        "description": "Retrieves the `Employee` with the given ID.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Employee to retrieve.",
              "example": "3799286b-c484-432a-833a-da43377d03b8",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeeGet"
          }
        },
        "summary": "Retrieve an existing Employee",
        "tags": [
          "Employee"
        ]
      },
      "patch": {
        "description": "Updates the Employee with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the Employee resource",
          "url": "https://docs.meitner.se/directory/v1/Employee"
        },
        "operationId": "EmployeeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Employee to update.",
              "example": "ab25a8f9-f642-407d-913a-d66b53156da6",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmployeeUpdate"
          }
        },
        "summary": "Update an existing Employee",
        "tags": [
          "Employee"
        ]
      }
    },
    "/group": {
      "get": {
        "description": "Returns a paginated list of all `Groups` in your organization.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupList"
          }
        },
        "summary": "List all Groups",
        "tags": [
          "Group"
        ]
      },
      "post": {
        "description": "Creates a new Group.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/GroupCreate"
          }
        },
        "summary": "Create a new Group",
        "tags": [
          "Group"
        ]
      }
    },
    "/group/_search": {
      "post": {
        "description": "The Group resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupSearch"
          }
        },
        "summary": "Search for Groups",
        "tags": [
          "Group"
        ]
      }
    },
    "/group/{id}": {
      "delete": {
        "description": "Deletes an existing Group by ID.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Group to delete.",
              "example": "363687fa-e1d5-4667-9a6e-4b8f591aae55",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing Group",
        "tags": [
          "Group"
        ]
      },
      "get": {
        "description": "Retrieves the `Group` with the given ID.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Group to retrieve.",
              "example": "b6a9f814-4eb6-4cb7-823e-0ba6c58312fc",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupGet"
          }
        },
        "summary": "Retrieve an existing Group",
        "tags": [
          "Group"
        ]
      },
      "patch": {
        "description": "Updates the Group with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the Group resource",
          "url": "https://docs.meitner.se/directory/v1/Group"
        },
        "operationId": "GroupUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Group to update.",
              "example": "b6e0aaca-fb06-481a-b2cf-214d91af90d1",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupUpdate"
          }
        },
        "summary": "Update an existing Group",
        "tags": [
          "Group"
        ]
      }
    },
    "/guardian": {
      "get": {
        "description": "Returns a paginated list of all `Guardians` in your organization.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GuardianList"
          }
        },
        "summary": "List all Guardians",
        "tags": [
          "Guardian"
        ]
      },
      "post": {
        "description": "Creates a new Guardian.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/GuardianCreate"
          }
        },
        "summary": "Create a new Guardian",
        "tags": [
          "Guardian"
        ]
      }
    },
    "/guardian/_search": {
      "post": {
        "description": "The Guardian resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GuardianSearch"
          }
        },
        "summary": "Search for Guardians",
        "tags": [
          "Guardian"
        ]
      }
    },
    "/guardian/{id}": {
      "delete": {
        "description": "Deletes an existing Guardian by ID.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Guardian to delete.",
              "example": "318b4e7f-e6e0-4a22-9875-208d3c1f2fc9",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing Guardian",
        "tags": [
          "Guardian"
        ]
      },
      "get": {
        "description": "Retrieves the `Guardian` with the given ID.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Guardian to retrieve.",
              "example": "b13b2929-09c5-4c50-9bee-28de6ffb8a33",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GuardianGet"
          }
        },
        "summary": "Retrieve an existing Guardian",
        "tags": [
          "Guardian"
        ]
      },
      "patch": {
        "description": "Updates the Guardian with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the Guardian resource",
          "url": "https://docs.meitner.se/directory/v1/Guardian"
        },
        "operationId": "GuardianUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Guardian to update.",
              "example": "a8f6424e-7356-4a35-8d59-9cc33b13905a",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GuardianUpdate"
          }
        },
        "summary": "Update an existing Guardian",
        "tags": [
          "Guardian"
        ]
      }
    },
    "/school": {
      "get": {
        "description": "Returns a paginated list of all `Schools` in your organization.",
        "externalDocs": {
          "description": "Docs for the School resource",
          "url": "https://docs.meitner.se/directory/v1/School"
        },
        "operationId": "SchoolList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SchoolList"
          }
        },
        "summary": "List all Schools",
        "tags": [
          "School"
        ]
      },
      "post": {
        "description": "Creates a new School.",
        "externalDocs": {
          "description": "Docs for the School resource",
          "url": "https://docs.meitner.se/directory/v1/School"
        },
        "operationId": "SchoolCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SchoolCreate"
          }
        },
        "summary": "Create a new School",
        "tags": [
          "School"
        ]
      }
    },
    "/school/_search": {
      "post": {
        "description": "The School resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the School resource",
          "url": "https://docs.meitner.se/directory/v1/School"
        },
        "operationId": "SchoolSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SchoolSearch"
          }
        },
        "summary": "Search for Schools",
        "tags": [
          "School"
        ]
      }
    },
    "/school/{id}": {
      "get": {
        "description": "Retrieves the `School` with the given ID.",
        "externalDocs": {
          "description": "Docs for the School resource",
          "url": "https://docs.meitner.se/directory/v1/School"
        },
        "operationId": "SchoolGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the School to retrieve.",
              "example": "41d9be8c-74ed-4346-b62f-3bcadaafcdb3",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SchoolGet"
          }
        },
        "summary": "Retrieve an existing School",
        "tags": [
          "School"
        ]
      },
      "patch": {
        "description": "Updates the School with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the School resource",
          "url": "https://docs.meitner.se/directory/v1/School"
        },
        "operationId": "SchoolUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the School to update.",
              "example": "eb8805ac-4481-466a-bc8c-0e9d1325f34a",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SchoolUpdate"
          }
        },
        "summary": "Update an existing School",
        "tags": [
          "School"
        ]
      }
    },
    "/student": {
      "get": {
        "description": "Returns a paginated list of all `Students` in your organization.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentList"
          }
        },
        "summary": "List all Students",
        "tags": [
          "Student"
        ]
      },
      "post": {
        "description": "Creates a new Student.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/StudentCreate"
          }
        },
        "summary": "Create a new Student",
        "tags": [
          "Student"
        ]
      }
    },
    "/student-placement": {
      "get": {
        "description": "Returns a paginated list of all `StudentPlacements` in your organization.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementList",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementList"
          }
        },
        "summary": "List all StudentPlacements",
        "tags": [
          "StudentPlacement"
        ]
      },
      "post": {
        "description": "Creates a new StudentPlacement.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/StudentPlacementCreate"
          }
        },
        "summary": "Create a new StudentPlacement",
        "tags": [
          "StudentPlacement"
        ]
      }
    },
    "/student-placement/_search": {
      "post": {
        "description": "The StudentPlacement resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementSearch"
          }
        },
        "summary": "Search for StudentPlacements",
        "tags": [
          "StudentPlacement"
        ]
      }
    },
    "/student-placement/{id}": {
      "delete": {
        "description": "Deletes an existing StudentPlacement by ID.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the StudentPlacement to delete.",
              "example": "fba0bffe-81d0-4584-81b9-4424b91a9dd4",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing StudentPlacement",
        "tags": [
          "StudentPlacement"
        ]
      },
      "get": {
        "description": "Retrieves the `StudentPlacement` with the given ID.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the StudentPlacement to retrieve.",
              "example": "40092ab7-4f8d-40f1-b265-7b8943f6fc63",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementGet"
          }
        },
        "summary": "Retrieve an existing StudentPlacement",
        "tags": [
          "StudentPlacement"
        ]
      },
      "patch": {
        "description": "Updates the StudentPlacement with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the StudentPlacement to update.",
              "example": "0c62227f-51b6-45e8-bca0-2c4371b40fdf",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementUpdate"
          }
        },
        "summary": "Update an existing StudentPlacement",
        "tags": [
          "StudentPlacement"
        ]
      }
    },
    "/student-placement/{id}/archive": {
      "patch": {
        "description": "Archive a student placement",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementArchive",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the student placement to archive",
              "example": "df2fe4c6-fdc7-4f42-b087-4f8588b0e3fe",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementArchive"
          }
        },
        "summary": "Archive a student placement",
        "tags": [
          "StudentPlacement"
        ]
      }
    },
    "/student-placement/{id}/restore": {
      "patch": {
        "description": "Restore an archived student placement",
        "externalDocs": {
          "description": "Docs for the StudentPlacement resource",
          "url": "https://docs.meitner.se/directory/v1/StudentPlacement"
        },
        "operationId": "StudentPlacementRestore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the student placement to restore",
              "example": "9bc3122a-1bf7-4a72-b192-8413efcf0f04",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentPlacementRestore"
          }
        },
        "summary": "Restore an archived student placement",
        "tags": [
          "StudentPlacement"
        ]
      }
    },
    "/student/_search": {
      "post": {
        "description": "The Student resource supports advanced searching and filtering via the `/_search` endpoint.\n\nYou can filter on multiple fields, combine conditions with AND/OR, and group filters using nestedFilters.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentSearch",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of items to return from the list.",
              "example": "123",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The number of items to skip in the list.",
              "example": "123",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentSearch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentSearch"
          }
        },
        "summary": "Search for Students",
        "tags": [
          "Student"
        ]
      }
    },
    "/student/{id}": {
      "delete": {
        "description": "Deletes an existing Student by ID.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Student to delete.",
              "example": "42acc39f-a0a7-4f96-a96e-305a7d93cfc8",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete an existing Student",
        "tags": [
          "Student"
        ]
      },
      "get": {
        "description": "Retrieves the `Student` with the given ID.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Student to retrieve.",
              "example": "fa1fa3d0-5060-4433-b9c0-5dba207bab07",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentGet"
          }
        },
        "summary": "Retrieve an existing Student",
        "tags": [
          "Student"
        ]
      },
      "patch": {
        "description": "Updates the Student with the given ID.\n\nThe update is partial, meaning you only need to send the fields you want to change.",
        "externalDocs": {
          "description": "Docs for the Student resource",
          "url": "https://docs.meitner.se/directory/v1/Student"
        },
        "operationId": "StudentUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "The ID of the Student to update.",
              "example": "3d21f7aa-834c-4dc1-b978-14e63c319269",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StudentUpdate"
          }
        },
        "summary": "Update an existing Student",
        "tags": [
          "Student"
        ]
      }
    }
  },
  "security": [
    {
      "ClientCredentials": [],
      "ClientSecret": []
    }
  ],
  "servers": [
    {
      "description": "Production API",
      "url": "https://api.meitner.se/directory/v1"
    },
    {
      "description": "Staging API",
      "url": "https://api.staging.meitner.se/directory/v1"
    },
    {
      "description": "Local API",
      "url": "http://localhost:8080/directory/v1"
    }
  ],
  "tags": [
    {
      "description": "AuditEvent holds the information about an audit event.",
      "externalDocs": {
        "description": "Docs for the AuditEvent resource",
        "url": "https://docs.meitner.se/directory/AuditEvent"
      },
      "name": "AuditEvent"
    },
    {
      "description": "Employee holds the personal information about an employee in the organization.",
      "externalDocs": {
        "description": "Docs for the Employee resource",
        "url": "https://docs.meitner.se/directory/Employee"
      },
      "name": "Employee"
    },
    {
      "description": "EmployeePlacement holds the information about an employee's placement in a school.",
      "externalDocs": {
        "description": "Docs for the EmployeePlacement resource",
        "url": "https://docs.meitner.se/directory/EmployeePlacement"
      },
      "name": "EmployeePlacement"
    },
    {
      "description": "Group holds the information about a group of students.",
      "externalDocs": {
        "description": "Docs for the Group resource",
        "url": "https://docs.meitner.se/directory/Group"
      },
      "name": "Group"
    },
    {
      "description": "Guardian holds the information about a guardian of a student.",
      "externalDocs": {
        "description": "Docs for the Guardian resource",
        "url": "https://docs.meitner.se/directory/Guardian"
      },
      "name": "Guardian"
    },
    {
      "description": "The `School` resource represents a school where daily operations occur. A school must exist before you can create StudentPlacements, EmployeePlacements, or Groups.\n \nThis resource can be created, updated, listed, retrieved, and deleted using the standard resource structure. It **does not** support search and filtering.\n",
      "externalDocs": {
        "description": "Docs for the School resource",
        "url": "https://docs.meitner.se/directory/School"
      },
      "name": "School"
    },
    {
      "description": "Student holds the personal information about a student, information about the school is stored in the StudentPlacement-resource.",
      "externalDocs": {
        "description": "Docs for the Student resource",
        "url": "https://docs.meitner.se/directory/Student"
      },
      "name": "Student"
    },
    {
      "description": "StudentPlacement holds the placement information about a student in a specific school.",
      "externalDocs": {
        "description": "Docs for the StudentPlacement resource",
        "url": "https://docs.meitner.se/directory/StudentPlacement"
      },
      "name": "StudentPlacement"
    }
  ]
}